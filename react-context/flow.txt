sign up -
in index.js there is a post request function that checks to see if the request body from the
clients input contains a username and password, if not the user will get a 400 error.
If it does then the password will be hashed using argon and the hashed password will
then be returned.Then in the promise we will create an sql query with the username
and hashed password along with other autogenerated items and inject into our database table.

sign in -
in index.js there is another post function that checks to see if the request body from
the clients input contains a username and password. if not the user will get a 400 error.
If it does then there will be another database query this time selecting the userId and hashedpassword
where the username is equal to the users input. from there we will receive a result and utilize
argon once more but this time to verify that the password input by the user is the hashedPassword.
if it is, we will then create a token by utilizing jwt.sign on our payload, and our Token_Secret.
From there the user now has access to the UserId and can make additional requests to the server
that require UserId. Aside from this, when a user clicks on the sign-in button this.state.user will
be assigned the current value of user. and we'll also set 'react-context-jwt''s value in local storage as
the token generated from jwt.sign.

user can stay signed in -
The reason the user is able to stay signed in is due to the redirect.jsx file. This file
checks to see if props.to is empty and if so it assigns the url.hash to #. however if the props.to
is not empty then the url.hash is set to props.to keeping the page on the same page even when refreshed.
Even if the page is refreshed and re-rendered it will keep the user signed in until the user clicks sign out
and forces the the token to be removed from react-context-jwt and the this.state.user to be changed.

sign out -
when a user signs out, there is no effect on our database. Once the user button has been pressed we simply
remove the token from 'react-context-jwt' to remove access, and in addition set this.state.user back to null in our
handleSignOut. This will trigger a re-render and bring us back to the log in screen.
